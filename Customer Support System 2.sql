-- Oracle SQL Code for Customer Support Issue Tracking and Analysis System

-- Drop tables in reverse order of dependency to avoid foreign key constraints issues
-- This is useful for re-running the script
DROP TABLE RESOLUTIONS CASCADE CONSTRAINTS;
DROP TABLE ISSUES CASCADE CONSTRAINTS;
DROP TABLE ISSUE_CATEGORIES CASCADE CONSTRAINTS;
DROP TABLE SUPPORT_AGENTS CASCADE CONSTRAINTS;
DROP TABLE CUSTOMERS CASCADE CONSTRAINTS;

-- Drop views and procedures if they exist
DROP VIEW AGENT_PERFORMANCE_VIEW;
DROP VIEW OPEN_ISSUES_SUMMARY_VIEW;
DROP PROCEDURE ASSIGN_ISSUE_TO_AGENT;

-- 1. CUSTOMERS Table
CREATE TABLE CUSTOMERS (
    CUSTOMER_ID     NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    FIRST_NAME      VARCHAR2(50) NOT NULL,
    LAST_NAME       VARCHAR2(50) NOT NULL,
    EMAIL           VARCHAR2(100) UNIQUE NOT NULL,
    PHONE_NUMBER    VARCHAR2(20)
);

-- Comments for CUSTOMERS Table
COMMENT ON TABLE CUSTOMERS IS 'Stores information about customers.';
COMMENT ON COLUMN CUSTOMERS.CUSTOMER_ID IS 'Unique identifier for the customer.';
COMMENT ON COLUMN CUSTOMERS.FIRST_NAME IS 'Customer''s first name.';
COMMENT ON COLUMN CUSTOMERS.LAST_NAME IS 'Customer''s last name.';
COMMENT ON COLUMN CUSTOMERS.EMAIL IS 'Customer''s email address (unique).';
COMMENT ON COLUMN CUSTOMERS.PHONE_NUMBER IS 'Customer''s phone number.';

-- 2. SUPPORT_AGENTS Table
CREATE TABLE SUPPORT_AGENTS (
    AGENT_ID        NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    AGENT_NAME      VARCHAR2(100) NOT NULL,
    AGENT_EMAIL     VARCHAR2(100) UNIQUE NOT NULL,
    HIRE_DATE       DATE DEFAULT SYSDATE
);

-- Comments for SUPPORT_AGENTS Table
COMMENT ON TABLE SUPPORT_AGENTS IS 'Stores information about support agents.';
COMMENT ON COLUMN SUPPORT_AGENTS.AGENT_ID IS 'Unique identifier for the agent.';
COMMENT ON COLUMN SUPPORT_AGENTS.AGENT_NAME IS 'Agent''s full name.';
COMMENT ON COLUMN SUPPORT_AGENTS.AGENT_EMAIL IS 'Agent''s email address (unique).';
COMMENT ON COLUMN SUPPORT_AGENTS.HIRE_DATE IS 'Date the agent was hired.';

-- 3. ISSUE_CATEGORIES Table
CREATE TABLE ISSUE_CATEGORIES (
    CATEGORY_ID     NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    CATEGORY_NAME   VARCHAR2(100) UNIQUE NOT NULL
);

-- Comments for ISSUE_CATEGORIES Table
COMMENT ON TABLE ISSUE_CATEGORIES IS 'Defines different types of issues.';
COMMENT ON COLUMN ISSUE_CATEGORIES.CATEGORY_ID IS 'Unique identifier for the category.';
COMMENT ON COLUMN ISSUE_CATEGORIES.CATEGORY_NAME IS 'Name of the issue category (e.g., ''Technical'', ''Billing'').';

-- 4. ISSUES Table
CREATE TABLE ISSUES (
    ISSUE_ID            NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    CUSTOMER_ID         NUMBER NOT NULL,
    AGENT_ID            NUMBER, -- Can be NULL if unassigned
    CATEGORY_ID         NUMBER NOT NULL,
    ISSUE_DESCRIPTION   VARCHAR2(1000) NOT NULL,
    REPORT_DATE         TIMESTAMP DEFAULT SYSTIMESTAMP,
    STATUS              VARCHAR2(50) DEFAULT 'Open' NOT NULL CHECK (STATUS IN ('Open', 'In Progress', 'Resolved', 'Closed', 'Escalated')),
    PRIORITY            VARCHAR2(50) DEFAULT 'Medium' NOT NULL CHECK (PRIORITY IN ('Low', 'Medium', 'High', 'Critical')),
    LAST_UPDATE_DATE    TIMESTAMP DEFAULT SYSTIMESTAMP,
    CONSTRAINT FK_ISSUES_CUSTOMERS FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS(CUSTOMER_ID),
    CONSTRAINT FK_ISSUES_AGENTS FOREIGN KEY (AGENT_ID) REFERENCES SUPPORT_AGENTS(AGENT_ID),
    CONSTRAINT FK_ISSUES_CATEGORIES FOREIGN KEY (CATEGORY_ID) REFERENCES ISSUE_CATEGORIES(CATEGORY_ID)
);

-- Comments for ISSUES Table
COMMENT ON TABLE ISSUES IS 'Stores details of each customer issue.';
COMMENT ON COLUMN ISSUES.ISSUE_ID IS 'Unique identifier for the issue.';
COMMENT ON COLUMN ISSUES.CUSTOMER_ID IS 'Foreign key linking to the CUSTOMERS table.';
COMMENT ON COLUMN ISSUES.AGENT_ID IS 'Foreign key linking to the SUPPORT_AGENTS table (can be NULL if unassigned).';
COMMENT ON COLUMN ISSUES.CATEGORY_ID IS 'Foreign key linking to the ISSUE_CATEGORIES table.';
COMMENT ON COLUMN ISSUES.ISSUE_DESCRIPTION IS 'Detailed description of the issue.';
COMMENT ON COLUMN ISSUES.REPORT_DATE IS 'Date and time the issue was reported.';
COMMENT ON COLUMN ISSUES.STATUS IS 'Current status of the issue (e.g., ''Open'', ''Resolved'').';
COMMENT ON COLUMN ISSUES.PRIORITY IS 'Priority level (''Low'', ''Medium'', ''High'', ''Critical'').';
COMMENT ON COLUMN ISSUES.LAST_UPDATE_DATE IS 'Date and time of the last status update.';

-- 5. RESOLUTIONS Table
CREATE TABLE RESOLUTIONS (
    RESOLUTION_ID       NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    ISSUE_ID            NUMBER UNIQUE NOT NULL, -- Each issue can have only one resolution record
    RESOLUTION_DATE     TIMESTAMP DEFAULT SYSTIMESTAMP,
    RESOLUTION_DETAILS  VARCHAR2(1000) NOT NULL,
    RESOLUTION_TYPE     VARCHAR2(100) NOT NULL CHECK (RESOLUTION_TYPE IN ('Fixed', 'Workaround', 'Information Provided', 'Escalated to Tier 2', 'Customer Self-Resolved', 'Not an Issue')),
    CONSTRAINT FK_RESOLUTIONS_ISSUES FOREIGN KEY (ISSUE_ID) REFERENCES ISSUES(ISSUE_ID)
);

-- Comments for RESOLUTIONS Table
COMMENT ON TABLE RESOLUTIONS IS 'Stores details about how each issue was resolved.';
COMMENT ON COLUMN RESOLUTIONS.RESOLUTION_ID IS 'Unique identifier for the resolution.';
COMMENT ON COLUMN RESOLUTIONS.ISSUE_ID IS 'Foreign key linking to the ISSUES table (unique to ensure one resolution per issue).';
COMMENT ON COLUMN RESOLUTIONS.RESOLUTION_DATE IS 'Date and time the issue was resolved.';
COMMENT ON COLUMN RESOLUTIONS.RESOLUTION_DETAILS IS 'Description of the resolution.';
COMMENT ON COLUMN RESOLUTIONS.RESOLUTION_TYPE IS 'Type of resolution (e.g., ''Fixed'', ''Workaround'').';

-- Data Insertion (20+ datasets)

-- Insert data into CUSTOMERS
INSERT INTO CUSTOMERS (FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER) VALUES ('Alice', 'Smith', 'alice.smith@example.com', '555-1234');
INSERT INTO CUSTOMERS (FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER) VALUES ('Bob', 'Johnson', 'bob.j@example.com', '555-5678');
INSERT INTO CUSTOMERS (FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER) VALUES ('Charlie', 'Brown', 'charlie.b@example.com', '555-8765');
INSERT INTO CUSTOMERS (FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER) VALUES ('Diana', 'Prince', 'diana.p@example.com', '555-4321');
INSERT INTO CUSTOMERS (FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER) VALUES ('Eve', 'Adams', 'eve.a@example.com', '555-9876');
INSERT INTO CUSTOMERS (FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER) VALUES ('Frank', 'White', 'frank.w@example.com', '555-1122');
INSERT INTO CUSTOMERS (FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER) VALUES ('Grace', 'Taylor', 'grace.t@example.com', '555-3344');
INSERT INTO CUSTOMERS (FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER) VALUES ('Henry', 'Wilson', 'henry.w@example.com', '555-5566');
INSERT INTO CUSTOMERS (FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER) VALUES ('Ivy', 'Moore', 'ivy.m@example.com', '555-7788');
INSERT INTO CUSTOMERS (FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER) VALUES ('Jack', 'King', 'jack.k@example.com', '555-9900');

-- Insert data into SUPPORT_AGENTS
INSERT INTO SUPPORT_AGENTS (AGENT_NAME, AGENT_EMAIL, HIRE_DATE) VALUES ('Sarah Connor', 'sarah.c@support.com', TO_DATE('2022-01-15', 'YYYY-MM-DD'));
INSERT INTO SUPPORT_AGENTS (AGENT_NAME, AGENT_EMAIL, HIRE_DATE) VALUES ('John Doe', 'john.d@support.com', TO_DATE('2021-03-20', 'YYYY-MM-DD'));
INSERT INTO SUPPORT_AGENTS (AGENT_NAME, AGENT_EMAIL, HIRE_DATE) VALUES ('Jane Smith', 'jane.s@support.com', TO_DATE('2023-06-01', 'YYYY-MM-DD'));
INSERT INTO SUPPORT_AGENTS (AGENT_NAME, AGENT_EMAIL, HIRE_DATE) VALUES ('Peter Jones', 'peter.j@support.com', TO_DATE('2022-11-10', 'YYYY-MM-DD'));

-- Insert data into ISSUE_CATEGORIES
INSERT INTO ISSUE_CATEGORIES (CATEGORY_NAME) VALUES ('Technical Support');
INSERT INTO ISSUE_CATEGORIES (CATEGORY_NAME) VALUES ('Billing Inquiry');
INSERT INTO ISSUE_CATEGORIES (CATEGORY_NAME) VALUES ('Product Feature Request');
INSERT INTO ISSUE_CATEGORIES (CATEGORY_NAME) VALUES ('Account Management');
INSERT INTO ISSUE_CATEGORIES (CATEGORY_NAME) VALUES ('Bug Report');
INSERT INTO ISSUE_CATEGORIES (CATEGORY_NAME) VALUES ('General Inquiry');

-- Insert data into ISSUES (20 records)
-- Note: Customer_ID, Agent_ID, and Category_ID are based on the order of insertion above
-- Customer IDs: 1-10
-- Agent IDs: 1-4
-- Category IDs: 1-6

-- Open issues
INSERT INTO ISSUES (CUSTOMER_ID, AGENT_ID, CATEGORY_ID, ISSUE_DESCRIPTION, REPORT_DATE, STATUS, PRIORITY)
VALUES (1, 2, 1, 'Cannot log in to the application after recent update.', TO_TIMESTAMP('2024-05-01 10:00:00', 'YYYY-MM-DD HH24:MI:SS'), 'Open', 'High');

INSERT INTO ISSUES (CUSTOMER_ID, AGENT_ID, CATEGORY_ID, ISSUE_DESCRIPTION, REPORT_DATE, STATUS, PRIORITY)
VALUES (3, NULL, 2, 'Incorrect charge on last month''s bill.', TO_TIMESTAMP('2024-05-02 11:30:00', 'YYYY-MM-DD HH24:MI:SS'), 'Open', 'High');

INSERT INTO ISSUES (CUSTOMER_ID, AGENT_ID, CATEGORY_ID, ISSUE_DESCRIPTION, REPORT_DATE, STATUS, PRIORITY)
VALUES (5, 1, 3, 'Requesting a new feature for data export to CSV.', TO_TIMESTAMP('2024-05-03 09:15:00', 'YYYY-MM-DD HH24:MI:SS'), 'Open', 'Medium');

INSERT INTO ISSUES (CUSTOMER_ID, AGENT_ID, CATEGORY_ID, ISSUE_DESCRIPTION, REPORT_DATE, STATUS, PRIORITY)
VALUES (2, 4, 1, 'Application crashes when opening certain files.', TO_TIMESTAMP('2024-05-04 14:00:00', 'YYYY-MM-DD HH24:MI:SS'), 'Open', 'Critical');

INSERT INTO ISSUES (CUSTOMER_ID, AGENT_ID, CATEGORY_ID, ISSUE_DESCRIPTION, REPORT_DATE, STATUS, PRIORITY)
VALUES (4, NULL, 4, 'Need to change my registered email address.', TO_TIMESTAMP('2024-05-05 16:45:00', 'YYYY-MM-DD HH24:MI:SS'), 'Open', 'Low');

-- In Progress issues
INSERT INTO ISSUES (CUSTOMER_ID, AGENT_ID, CATEGORY_ID, ISSUE_DESCRIPTION, REPORT_DATE, STATUS, PRIORITY, LAST_UPDATE_DATE)
VALUES (6, 3, 5, 'Reported a bug where notifications are not showing up.', TO_TIMESTAMP('2024-04-28 08:00:00', 'YYYY-MM-DD HH24:MI:SS'), 'In Progress', 'High', TO_TIMESTAMP('2024-05-01 10:30:00', 'YYYY-MM-DD HH24:MI:SS'));

INSERT INTO ISSUES (CUSTOMER_ID, AGENT_ID, CATEGORY_ID, ISSUE_DESCRIPTION, REPORT_DATE, STATUS, PRIORITY, LAST_UPDATE_DATE)
VALUES (7, 2, 1, 'Slow performance when loading large datasets.', TO_TIMESTAMP('2024-04-29 13:00:00', 'YYYY-MM-DD HH24:MI:SS'), 'In Progress', 'Critical', TO_TIMESTAMP('2024-05-03 15:00:00', 'YYYY-MM-DD HH24:MI:SS'));

INSERT INTO ISSUES (CUSTOMER_ID, AGENT_ID, CATEGORY_ID, ISSUE_DESCRIPTION, REPORT_DATE, STATUS, PRIORITY, LAST_UPDATE_DATE)
VALUES (8, 1, 6, 'General question about subscription plans.', TO_TIMESTAMP('2024-05-01 09:00:00', 'YYYY-MM-DD HH24:MI:SS'), 'In Progress', 'Low', TO_TIMESTAMP('2024-05-02 11:00:00', 'YYYY-MM-DD HH24:MI:SS'));

INSERT INTO ISSUES (CUSTOMER_ID, AGENT_ID, CATEGORY_ID, ISSUE_DESCRIPTION, REPORT_DATE, STATUS, PRIORITY, LAST_UPDATE_DATE)
VALUES (9, 4, 2, 'Query about a refund status.', TO_TIMESTAMP('2024-05-02 10:10:00', 'YYYY-MM-DD HH24:MI:SS'), 'In Progress', 'Medium', TO_TIMESTAMP('2024-05-04 09:00:00', 'YYYY-MM-DD HH24:MI:SS'));

-- Resolved issues (will have corresponding resolution entries)
INSERT INTO ISSUES (CUSTOMER_ID, AGENT_ID, CATEGORY_ID, ISSUE_DESCRIPTION, REPORT_DATE, STATUS, PRIORITY, LAST_UPDATE_DATE)
VALUES (10, 3, 1, 'Printer not connecting to the network.', TO_TIMESTAMP('2024-04-20 09:00:00', 'YYYY-MM-DD HH24:MI:SS'), 'Resolved', 'High', TO_TIMESTAMP('2024-04-22 14:00:00', 'YYYY-MM-DD HH24:MI:SS'));

INSERT INTO ISSUES (CUSTOMER_ID, AGENT_ID, CATEGORY_ID, ISSUE_DESCRIPTION, REPORT_DATE, STATUS, PRIORITY, LAST_UPDATE_DATE)
VALUES (1, 2, 4, 'Cannot update my profile picture.', TO_TIMESTAMP('2024-04-21 11:00:00', 'YYYY-MM-DD HH24:MI:SS'), 'Resolved', 'Medium', TO_TIMESTAMP('2024-04-21 15:00:00', 'YYYY-MM-DD HH24:MI:SS'));

INSERT INTO ISSUES (CUSTOMER_ID, AGENT_ID, CATEGORY_ID, ISSUE_DESCRIPTION, REPORT_DATE, STATUS, PRIORITY, LAST_UPDATE_DATE)
VALUES (3, 1, 5, 'Application freezes when saving documents.', TO_TIMESTAMP('2024-04-23 10:00:00', 'YYYY-MM-DD HH24:MI:SS'), 'Resolved', 'Critical', TO_TIMESTAMP('2024-04-25 17:00:00', 'YYYY-MM-DD HH24:MI:SS'));

INSERT INTO ISSUES (CUSTOMER_ID, AGENT_ID, CATEGORY_ID, ISSUE_DESCRIPTION, REPORT_DATE, STATUS, PRIORITY, LAST_UPDATE_DATE)
VALUES (5, 4, 3, 'Suggestion for dark mode implementation.', TO_TIMESTAMP('2024-04-24 13:00:00', 'YYYY-MM-DD HH24:MI:SS'), 'Resolved', 'Low', TO_TIMESTAMP('2024-04-24 16:00:00', 'YYYY-MM-DD HH24:MI:SS'));

INSERT INTO ISSUES (CUSTOMER_ID, AGENT_ID, CATEGORY_ID, ISSUE_DESCRIPTION, REPORT_DATE, STATUS, PRIORITY, LAST_UPDATE_DATE)
VALUES (2, 3, 2, 'Double charge for premium subscription.', TO_TIMESTAMP('2024-04-25 09:30:00', 'YYYY-MM-DD HH24:MI:SS'), 'Resolved', 'High', TO_TIMESTAMP('2024-04-26 11:00:00', 'YYYY-MM-DD HH24:MI:SS'));

-- Closed issues
INSERT INTO ISSUES (CUSTOMER_ID, AGENT_ID, CATEGORY_ID, ISSUE_DESCRIPTION, REPORT_DATE, STATUS, PRIORITY, LAST_UPDATE_DATE)
VALUES (4, 2, 1, 'Internet connection dropping frequently.', TO_TIMESTAMP('2024-04-15 10:00:00', 'YYYY-MM-DD HH24:MI:SS'), 'Closed', 'High', TO_TIMESTAMP('2024-04-17 15:00:00', 'YYYY-MM-DD HH24:MI:SS'));

INSERT INTO ISSUES (CUSTOMER_ID, AGENT_ID, CATEGORY_ID, ISSUE_DESCRIPTION, REPORT_DATE, STATUS, PRIORITY, LAST_UPDATE_DATE)
VALUES (6, 1, 6, 'Question about data privacy policy.', TO_TIMESTAMP('2024-04-16 14:00:00', 'YYYY-MM-DD HH24:MI:SS'), 'Closed', 'Low', TO_TIMESTAMP('2024-04-16 16:00:00', 'YYYY-MM-DD HH24:MI:SS'));

INSERT INTO ISSUES (CUSTOMER_ID, AGENT_ID, CATEGORY_ID, ISSUE_DESCRIPTION, REPORT_DATE, STATUS, PRIORITY, LAST_UPDATE_DATE)
VALUES (8, 4, 4, 'Account locked due to too many failed login attempts.', TO_TIMESTAMP('2024-04-18 09:00:00', 'YYYY-MM-DD HH24:MI:SS'), 'Closed', 'Medium', TO_TIMESTAMP('2024-04-18 10:30:00', 'YYYY-MM-DD HH24:MI:SS'));

INSERT INTO ISSUES (CUSTOMER_ID, AGENT_ID, CATEGORY_ID, ISSUE_DESCRIPTION, REPORT_DATE, STATUS, PRIORITY, LAST_UPDATE_DATE)
VALUES (7, 3, 5, 'UI elements overlapping on mobile.', TO_TIMESTAMP('2024-04-19 11:00:00', 'YYYY-MM-DD HH24:MI:SS'), 'Closed', 'High', TO_TIMESTAMP('2024-04-20 12:00:00', 'YYYY-MM-DD HH24:MI:SS'));

INSERT INTO ISSUES (CUSTOMER_ID, AGENT_ID, CATEGORY_ID, ISSUE_DESCRIPTION, REPORT_DATE, STATUS, PRIORITY, LAST_UPDATE_DATE)
VALUES (9, 2, 1, 'Software update failed to install.', TO_TIMESTAMP('2024-04-20 15:00:00', 'YYYY-MM-DD HH24:MI:SS'), 'Closed', 'Critical', TO_TIMESTAMP('2024-04-22 10:00:00', 'YYYY-MM-DD HH24:MI:SS'));

INSERT INTO ISSUES (CUSTOMER_ID, AGENT_ID, CATEGORY_ID, ISSUE_DESCRIPTION, REPORT_DATE, STATUS, PRIORITY, LAST_UPDATE_DATE)
VALUES (10, 1, 2, 'Subscription renewal query.', TO_TIMESTAMP('2024-04-21 10:00:00', 'YYYY-MM-DD HH24:MI:SS'), 'Closed', 'Low', TO_TIMESTAMP('2024-04-21 11:00:00', 'YYYY-MM-DD HH24:MI:SS'));

-- Insert data into RESOLUTIONS (for resolved and closed issues)
-- Issue IDs for resolved/closed issues (from above inserts): 10, 11, 12, 13, 14, 15, 16, 17, 18, 19

INSERT INTO RESOLUTIONS (ISSUE_ID, RESOLUTION_DATE, RESOLUTION_DETAILS, RESOLUTION_TYPE)
VALUES (10, TO_TIMESTAMP('2024-04-22 14:00:00', 'YYYY-MM-DD HH24:MI:SS'), 'Provided steps to reconfigure printer network settings. Confirmed resolution with customer.', 'Fixed');

INSERT INTO RESOLUTIONS (ISSUE_ID, RESOLUTION_DATE, RESOLUTION_DETAILS, RESOLUTION_TYPE)
VALUES (11, TO_TIMESTAMP('2024-04-21 15:00:00', 'YYYY-MM-DD HH24:MI:SS'), 'Guided customer through profile settings to update picture.', 'Information Provided');

INSERT INTO RESOLUTIONS (ISSUE_ID, RESOLUTION_DATE, RESOLUTION_DETAILS, RESOLUTION_TYPE)
VALUES (12, TO_TIMESTAMP('2024-04-25 17:00:00', 'YYYY-MM-DD HH24:MI:SS'), 'Identified memory leak bug. Provided temporary workaround and escalated to development team for permanent fix.', 'Workaround');

INSERT INTO RESOLUTIONS (ISSUE_ID, RESOLUTION_DATE, RESOLUTION_DETAILS, RESOLUTION_TYPE)
VALUES (13, TO_TIMESTAMP('2024-04-24 16:00:00', 'YYYY-MM-DD HH24:MI:SS'), 'Logged feature request for dark mode. Informed customer it will be considered in future updates.', 'Information Provided');

INSERT INTO RESOLUTIONS (ISSUE_ID, RESOLUTION_DATE, RESOLUTION_DETAILS, RESOLUTION_TYPE)
VALUES (14, TO_TIMESTAMP('2024-04-26 11:00:00', 'YYYY-MM-DD HH24:MI:SS'), 'Confirmed double charge was a system error. Initiated refund process.', 'Fixed');

INSERT INTO RESOLUTIONS (ISSUE_ID, RESOLUTION_DATE, RESOLUTION_DETAILS, RESOLUTION_TYPE)
VALUES (15, TO_TIMESTAMP('2024-04-17 15:00:00', 'YYYY-MM-DD HH24:MI:SS'), 'Troubleshooted router settings and updated firmware. Connection stabilized.', 'Fixed');

INSERT INTO RESOLUTIONS (ISSUE_ID, RESOLUTION_DATE, RESOLUTION_DETAILS, RESOLUTION_TYPE)
VALUES (16, TO_TIMESTAMP('2024-04-16 16:00:00', 'YYYY-MM-DD HH24:MI:SS'), 'Provided link to the detailed privacy policy document.', 'Information Provided');

INSERT INTO RESOLUTIONS (ISSUE_ID, RESOLUTION_DATE, RESOLUTION_DETAILS, RESOLUTION_TYPE)
VALUES (17, TO_TIMESTAMP('2024-04-18 10:30:00', 'YYYY-MM-DD HH24:MI:SS'), 'Unlocked account and advised customer to reset password with stronger credentials.', 'Fixed');

INSERT INTO RESOLUTIONS (ISSUE_ID, RESOLUTION_DATE, RESOLUTION_DETAILS, RESOLUTION_TYPE)
VALUES (18, TO_TIMESTAMP('2024-04-20 12:00:00', 'YYYY-MM-DD HH24:MI:SS'), 'Provided steps to adjust mobile display settings to prevent UI overlap.', 'Workaround');

INSERT INTO RESOLUTIONS (ISSUE_ID, RESOLUTION_DATE, RESOLUTION_DETAILS, RESOLUTION_TYPE)
VALUES (19, TO_TIMESTAMP('2024-04-22 10:00:00', 'YYYY-MM-DD HH24:MI:SS'), 'Guided customer through manual installation of the software update. Update successful.', 'Fixed');

INSERT INTO RESOLUTIONS (ISSUE_ID, RESOLUTION_DATE, RESOLUTION_DETAILS, RESOLUTION_TYPE)
VALUES (20, TO_TIMESTAMP('2024-04-21 11:00:00', 'YYYY-MM-DD HH24:MI:SS'), 'Confirmed subscription renewal and provided details of next billing cycle.', 'Information Provided');

-- Commit the changes
COMMIT;

-- Additional SQL for analysis and resume building

-- 6. Views for simplified reporting

-- View: AGENT_PERFORMANCE_VIEW
-- Shows the number of issues resolved by each agent, and their average resolution time.
CREATE OR REPLACE VIEW AGENT_PERFORMANCE_VIEW AS
SELECT
    SA.AGENT_NAME,
    COUNT(I.ISSUE_ID) AS TOTAL_ISSUES_HANDLED,
    COUNT(CASE WHEN I.STATUS = 'Resolved' THEN I.ISSUE_ID END) AS ISSUES_RESOLVED,
    ROUND(AVG(EXTRACT(DAY FROM (R.RESOLUTION_DATE - I.REPORT_DATE)) * 24 * 60 +
              EXTRACT(HOUR FROM (R.RESOLUTION_DATE - I.REPORT_DATE)) * 60 +
              EXTRACT(MINUTE FROM (R.RESOLUTION_DATE - I.REPORT_DATE))), 2) AS AVG_RESOLUTION_TIME_MINUTES
FROM
    SUPPORT_AGENTS SA
LEFT JOIN
    ISSUES I ON SA.AGENT_ID = I.AGENT_ID
LEFT JOIN
    RESOLUTIONS R ON I.ISSUE_ID = R.ISSUE_ID
GROUP BY
    SA.AGENT_NAME
ORDER BY
    ISSUES_RESOLVED DESC;

--COMMENT ON VIEW AGENT_PERFORMANCE_VIEW IS 'Provides a summary of agent performance, including issues handled and average resolution time.';

-- View: OPEN_ISSUES_SUMMARY_VIEW
-- Shows a summary of open issues by category and priority.
CREATE OR REPLACE VIEW OPEN_ISSUES_SUMMARY_VIEW AS
SELECT
    IC.CATEGORY_NAME,
    I.PRIORITY,
    COUNT(I.ISSUE_ID) AS NUMBER_OF_OPEN_ISSUES
FROM
    ISSUES I
JOIN
    ISSUE_CATEGORIES IC ON I.CATEGORY_ID = IC.CATEGORY_ID
WHERE
    I.STATUS IN ('Open', 'In Progress', 'Escalated')
GROUP BY
    IC.CATEGORY_NAME, I.PRIORITY
ORDER BY
    IC.CATEGORY_NAME,
    CASE I.PRIORITY
        WHEN 'Critical' THEN 1
        WHEN 'High' THEN 2
        WHEN 'Medium' THEN 3
        WHEN 'Low' THEN 4
        ELSE 5
    END;

--COMMENT ON VIEW OPEN_ISSUES_SUMMARY_VIEW IS 'Summarizes open issues by category and priority.';

-- 7. Stored Procedure for Issue Assignment
-- This procedure assigns an open issue to a specific agent.
CREATE OR REPLACE PROCEDURE ASSIGN_ISSUE_TO_AGENT (
    p_issue_id      IN NUMBER,
    p_agent_id      IN NUMBER,
    p_status        OUT VARCHAR2,
    p_message       OUT VARCHAR2
)
AS
    v_current_status VARCHAR2(50);
BEGIN
    -- Check if the issue exists
    SELECT STATUS INTO v_current_status FROM ISSUES WHERE ISSUE_ID = p_issue_id;

    IF v_current_status = 'Open' THEN
        -- Assign the issue and update status to 'In Progress'
        UPDATE ISSUES
        SET
            AGENT_ID = p_agent_id,
            STATUS = 'In Progress',
            LAST_UPDATE_DATE = SYSTIMESTAMP
        WHERE
            ISSUE_ID = p_issue_id;

        p_status := 'SUCCESS';
        p_message := 'Issue ' || p_issue_id || ' successfully assigned to agent ' || p_agent_id || ' and status updated to In Progress.';
    ELSIF v_current_status IN ('Resolved', 'Closed') THEN
        p_status := 'ERROR';
        p_message := 'Issue ' || p_issue_id || ' is already ' || v_current_status || ' and cannot be assigned.';
    ELSE
        p_status := 'ERROR';
        p_message := 'Issue ' || p_issue_id || ' is currently ' || v_current_status || '. Assignment might not be appropriate.';
    END IF;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        p_status := 'ERROR';
        p_message := 'Issue ' || p_issue_id || ' not found.';
    WHEN OTHERS THEN
        p_status := 'ERROR';
        p_message := 'An unexpected error occurred: ' || SQLERRM;
        ROLLBACK; -- Rollback any changes in case of error
END;
/

--COMMENT ON PROCEDURE ASSIGN_ISSUE_TO_AGENT IS 'Assigns an open issue to a specified support agent and updates its status.';

-- 8. Example Analytical Queries

-- Query 1: Get all issues reported by a specific customer
SELECT
    I.ISSUE_ID,
    I.ISSUE_DESCRIPTION,
    I.REPORT_DATE,
    I.STATUS,
    I.PRIORITY,
    SA.AGENT_NAME AS ASSIGNED_AGENT,
    IC.CATEGORY_NAME
FROM
    ISSUES I
JOIN
    CUSTOMERS C ON I.CUSTOMER_ID = C.CUSTOMER_ID
LEFT JOIN
    SUPPORT_AGENTS SA ON I.AGENT_ID = SA.AGENT_ID
JOIN
    ISSUE_CATEGORIES IC ON I.CATEGORY_ID = IC.CATEGORY_ID
WHERE
    C.EMAIL = 'alice.smith@example.com'
ORDER BY
    I.REPORT_DATE DESC;

-- Query 2: Find the top 3 most common issue categories
SELECT
    IC.CATEGORY_NAME,
    COUNT(I.ISSUE_ID) AS NUMBER_OF_ISSUES
FROM
    ISSUES I
JOIN
    ISSUE_CATEGORIES IC ON I.CATEGORY_ID = IC.CATEGORY_ID
GROUP BY
    IC.CATEGORY_NAME
ORDER BY
    NUMBER_OF_ISSUES DESC
FETCH FIRST 3 ROWS ONLY; -- For Oracle 12c+

-- Query 3: List all issues that are 'High' or 'Critical' priority and are still 'Open' or 'In Progress'
SELECT
    I.ISSUE_ID,
    C.FIRST_NAME || ' ' || C.LAST_NAME AS CUSTOMER_NAME,
    I.ISSUE_DESCRIPTION,
    I.REPORT_DATE,
    I.STATUS,
    I.PRIORITY,
    SA.AGENT_NAME AS ASSIGNED_AGENT
FROM
    ISSUES I
JOIN
    CUSTOMERS C ON I.CUSTOMER_ID = C.CUSTOMER_ID
LEFT JOIN
    SUPPORT_AGENTS SA ON I.AGENT_ID = SA.AGENT_ID
WHERE
    I.STATUS IN ('Open', 'In Progress')
    AND I.PRIORITY IN ('High', 'Critical')
ORDER BY
    I.PRIORITY DESC, I.REPORT_DATE ASC;

-- Query 4: Calculate the average time to resolve 'Technical Support' issues (in minutes)
SELECT
    ROUND(AVG(EXTRACT(DAY FROM (R.RESOLUTION_DATE - I.REPORT_DATE)) * 24 * 60 +
              EXTRACT(HOUR FROM (R.RESOLUTION_DATE - I.REPORT_DATE)) * 60 +
              EXTRACT(MINUTE FROM (R.RESOLUTION_DATE - I.REPORT_DATE))), 2) AS AVG_RESOLUTION_TIME_MINUTES
FROM
    ISSUES I
JOIN
    RESOLUTIONS R ON I.ISSUE_ID = R.ISSUE_ID
JOIN
    ISSUE_CATEGORIES IC ON I.CATEGORY_ID = IC.CATEGORY_ID
WHERE
    IC.CATEGORY_NAME = 'Technical Support';

-- Query 5: Get customers who have reported more than one issue
SELECT
    C.FIRST_NAME,
    C.LAST_NAME,
    C.EMAIL,
    COUNT(I.ISSUE_ID) AS TOTAL_ISSUES_REPORTED
FROM
    CUSTOMERS C
JOIN
    ISSUES I ON C.CUSTOMER_ID = I.CUSTOMER_ID
GROUP BY
    C.CUSTOMER_ID, C.FIRST_NAME, C.LAST_NAME, C.EMAIL
HAVING
    COUNT(I.ISSUE_ID) > 1
ORDER BY
    TOTAL_ISSUES_REPORTED DESC;

-- Query 6: Find issues that have been open for more than 7 days
SELECT
    I.ISSUE_ID,
    C.FIRST_NAME || ' ' || C.LAST_NAME AS CUSTOMER_NAME,
    I.ISSUE_DESCRIPTION,
    I.REPORT_DATE,
    I.STATUS,
    I.PRIORITY
FROM
    ISSUES I
JOIN
    CUSTOMERS C ON I.CUSTOMER_ID = C.CUSTOMER_ID
WHERE
    I.STATUS IN ('Open', 'In Progress', 'Escalated')
    AND (SYSTIMESTAMP - I.REPORT_DATE) > INTERVAL '7' DAY
ORDER BY
    I.REPORT_DATE ASC;

-- Query 7: Get the resolution types distribution
SELECT
    RESOLUTION_TYPE,
    COUNT(RESOLUTION_ID) AS NUMBER_OF_RESOLUTIONS
FROM
    RESOLUTIONS
GROUP BY
    RESOLUTION_TYPE
ORDER BY
    NUMBER_OF_RESOLUTIONS DESC;

-- Query 8: Find issues resolved by 'John Doe'
SELECT
    I.ISSUE_ID,
    I.ISSUE_DESCRIPTION,
    I.REPORT_DATE,
    R.RESOLUTION_DATE,
    R.RESOLUTION_DETAILS,
    R.RESOLUTION_TYPE
FROM
    ISSUES I
JOIN
    RESOLUTIONS R ON I.ISSUE_ID = R.ISSUE_ID
JOIN
    SUPPORT_AGENTS SA ON I.AGENT_ID = SA.AGENT_ID
WHERE
    SA.AGENT_NAME = 'John Doe'
ORDER BY
    R.RESOLUTION_DATE DESC;

-- Commit the changes
COMMIT;

-- Basic SELECT statements to verify data (can be commented out after initial verification)
SELECT * FROM CUSTOMERS;
SELECT * FROM SUPPORT_AGENTS;
SELECT * FROM ISSUE_CATEGORIES;
SELECT * FROM ISSUES;
SELECT * FROM RESOLUTIONS;

-- Verify Views
SELECT * FROM AGENT_PERFORMANCE_VIEW;
SELECT * FROM OPEN_ISSUES_SUMMARY_VIEW;

-- Example of executing the stored procedure
-- DECLARE
--     v_status VARCHAR2(50);
--     v_message VARCHAR2(200);
-- BEGIN
--     -- Try to assign an open issue (e.g., Issue_ID 3, which is 'Open' and unassigned in the sample data)
--     ASSIGN_ISSUE_TO_AGENT(3, 1, v_status, v_message);
--     DBMS_OUTPUT.PUT_LINE('Status: ' || v_status || ', Message: ' || v_message);

--     -- Try to assign an already resolved issue (e.g., Issue_ID 10)
--     ASSIGN_ISSUE_TO_AGENT(10, 2, v_status, v_message);
--     DBMS_OUTPUT.PUT_LINE('Status: ' || v_status || ', Message: ' || v_message);

--     -- Try to assign a non-existent issue
--     ASSIGN_ISSUE_TO_AGENT(999, 1, v_status, v_message);
--     DBMS_OUTPUT.PUT_LINE('Status: ' || v_status || ', Message: ' || v_message);
-- END;
-- /
